============================ LEXER =============================
FILA: 1, COLUMNA: 0, TIPO: class, LEXEMA: class
FILA: 1, COLUMNA: 6, TIPO: type, LEXEMA: Main
FILA: 1, COLUMNA: 11, TIPO: inherits, LEXEMA: inherits
FILA: 1, COLUMNA: 20, TIPO: type, LEXEMA: IO
FILA: 1, COLUMNA: 23, TIPO: {, LEXEMA: {
FILA: 3, COLUMNA: 1, TIPO: id, LEXEMA: main
FILA: 3, COLUMNA: 5, TIPO: (, LEXEMA: (
FILA: 3, COLUMNA: 6, TIPO: ), LEXEMA: )
FILA: 3, COLUMNA: 8, TIPO: :, LEXEMA: :
FILA: 3, COLUMNA: 10, TIPO: type, LEXEMA: Int
FILA: 3, COLUMNA: 14, TIPO: {, LEXEMA: {
FILA: 4, COLUMNA: 2, TIPO: integer, LEXEMA: 3
FILA: 5, COLUMNA: 1, TIPO: }, LEXEMA: }
FILA: 5, COLUMNA: 2, TIPO: ;, LEXEMA: ;
FILA: 6, COLUMNA: 0, TIPO: }, LEXEMA: }
FILA: 6, COLUMNA: 1, TIPO: ;, LEXEMA: ;
FILA: 8, COLUMNA: 0, TIPO: class, LEXEMA: class
FILA: 8, COLUMNA: 6, TIPO: type, LEXEMA: A
FILA: 8, COLUMNA: 8, TIPO: inherits, LEXEMA: inherits
FILA: 8, COLUMNA: 17, TIPO: type, LEXEMA: IO
FILA: 8, COLUMNA: 20, TIPO: {, LEXEMA: {
FILA: 10, COLUMNA: 1, TIPO: id, LEXEMA: fact
FILA: 10, COLUMNA: 5, TIPO: (, LEXEMA: (
FILA: 10, COLUMNA: 6, TIPO: id, LEXEMA: n
FILA: 10, COLUMNA: 7, TIPO: :, LEXEMA: :
FILA: 10, COLUMNA: 9, TIPO: type, LEXEMA: AUTO_TYPE
FILA: 10, COLUMNA: 18, TIPO: ), LEXEMA: )
FILA: 10, COLUMNA: 20, TIPO: :, LEXEMA: :
FILA: 10, COLUMNA: 22, TIPO: type, LEXEMA: AUTO_TYPE
FILA: 10, COLUMNA: 32, TIPO: {, LEXEMA: {
FILA: 11, COLUMNA: 2, TIPO: if, LEXEMA: if
FILA: 11, COLUMNA: 5, TIPO: (, LEXEMA: (
FILA: 11, COLUMNA: 6, TIPO: id, LEXEMA: n
FILA: 11, COLUMNA: 7, TIPO: <, LEXEMA: <
FILA: 11, COLUMNA: 8, TIPO: integer, LEXEMA: 0
FILA: 11, COLUMNA: 9, TIPO: ), LEXEMA: )
FILA: 11, COLUMNA: 11, TIPO: then, LEXEMA: then
FILA: 11, COLUMNA: 16, TIPO: integer, LEXEMA: 1
FILA: 11, COLUMNA: 18, TIPO: else, LEXEMA: else
FILA: 11, COLUMNA: 23, TIPO: id, LEXEMA: n
FILA: 11, COLUMNA: 24, TIPO: *, LEXEMA: *
FILA: 11, COLUMNA: 25, TIPO: id, LEXEMA: fact
FILA: 11, COLUMNA: 29, TIPO: (, LEXEMA: (
FILA: 11, COLUMNA: 30, TIPO: id, LEXEMA: n
FILA: 11, COLUMNA: 31, TIPO: -, LEXEMA: -
FILA: 11, COLUMNA: 32, TIPO: integer, LEXEMA: 1
FILA: 11, COLUMNA: 33, TIPO: ), LEXEMA: )
FILA: 11, COLUMNA: 35, TIPO: fi, LEXEMA: fi
FILA: 12, COLUMNA: 1, TIPO: }, LEXEMA: }
FILA: 12, COLUMNA: 2, TIPO: ;, LEXEMA: ;
FILA: 14, COLUMNA: 0, TIPO: }, LEXEMA: }
FILA: 14, COLUMNA: 1, TIPO: ;, LEXEMA: ;
FILA: 0, COLUMNA: 0, TIPO: $, LEXEMA: $
============================ PARSER ============================
<atom> -> integer
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <term>
<comp-expr> -> <arith>
<truth-expr> -> <comp-expr>
<expr> -> <truth-expr>
<feature> -> id ( ) : type { <expr> } ;
<feature-list> -> ε
<feature-list> -> <feature> <feature-list>
<def-class> -> class type inherits type { <feature-list> } ;
<param> -> id : type
<param-list> -> <param>
<atom> -> id
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <term>
<comp-expr> -> <arith>
<atom> -> integer
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <term>
<comp-expr> -> <comp-expr> < <arith>
<truth-expr> -> <comp-expr>
<expr> -> <truth-expr>
<atom> -> ( <expr> )
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <term>
<comp-expr> -> <arith>
<truth-expr> -> <comp-expr>
<expr> -> <truth-expr>
<atom> -> integer
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <term>
<comp-expr> -> <arith>
<truth-expr> -> <comp-expr>
<expr> -> <truth-expr>
<atom> -> id
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<atom> -> id
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <term>
<atom> -> integer
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <factor>
<arith> -> <arith> - <term>
<comp-expr> -> <arith>
<truth-expr> -> <comp-expr>
<expr> -> <truth-expr>
<arg-list> -> <expr>
<member-call> -> id ( <arg-list> )
<atom> -> <member-call>
<factor-2> -> <atom>
<factor> -> <factor-2>
<term> -> <term> * <factor>
<arith> -> <term>
<comp-expr> -> <arith>
<truth-expr> -> <comp-expr>
<expr> -> <truth-expr>
<expr> -> if <expr> then <expr> else <expr> fi
<feature> -> id ( <param-list> ) : type { <expr> } ;
<feature-list> -> ε
<feature-list> -> <feature> <feature-list>
<def-class> -> class type inherits type { <feature-list> } ;
<class-list> -> <def-class>
<class-list> -> <def-class> <class-list>
<program> -> <class-list>
============================= AST ==============================
\__ProgramNode [<class> ... <class>]
    \__ClassDeclarationNode : class Main inherits IO { <feature> ... <feature> }
        \__FuncDeclarationNode : main() : Int { <expr> }
            \__IntegerNode : 3
    \__ClassDeclarationNode : class A inherits IO { <feature> ... <feature> }
        \__FuncDeclarationNode : fact(n : AUTO_TYPE) : AUTO_TYPE { <expr> }
            \__IfThenElseNode : if <expr> then <expr> else <expr> fi
                \__<expr> LessNode <expr>
                    \__IdNode : n
                    \__IntegerNode : 0
                \__IntegerNode : 1
                \__<expr> StarNode <expr>
                    \__IdNode : n
                    \__MemberCallNode : fact(<expr>, ..., <expr>)
                        \__<expr> MinusNode <expr>
                            \__IdNode : n
                            \__IntegerNode : 1
======================= COLECCIONANDO TIPOS ========================
ERRORES : [
]
CONTEXTO :
{
    tipo SELF_TYPE {}
    
    tipo AUTO_TYPE {}
    
    tipo Object {}
    
    tipo IO {}
    
    tipo Int {}
    
    tipo String {}
    
    tipo Bool {}
    
    tipo Main {}
    
    tipo A {}
    
}
======================= CONSTRUYENDO TIPOS ========================
ERRORES : [
]
CONTEXTO :
{
    tipo SELF_TYPE {}
    
    tipo AUTO_TYPE {}
    
    tipo Object {
        [method] abort() : Object ;
        [method] type_name() : String ;
        [method] copy() : SELF_TYPE ;
    }
    
    tipo IO : Object {
        [method] out_string(s : String) : SELF_TYPE ;
        [method] out_int(i : Int) : SELF_TYPE ;
        [method] in_string() : String ;
        [method] in_int() : Int ;
    }
    
    tipo Int : Object {}
    
    tipo String : Object {
        [method] length() : Int ;
        [method] concat(s : String) : String ;
        [method] substr(pos : Int, len : Int) : String ;
    }
    
    tipo Bool : Object {}
    
    tipo Main : IO {
        [method] main() : Int ;
    }
    
    tipo A : IO {
        [method] fact(n : AUTO_TYPE) : AUTO_TYPE ;
    }
    
}
======================== CHEQUEANDO TIPOS =========================
ERRORES : [
]
CONTEXTO :
{
    tipo SELF_TYPE {}
    
    tipo AUTO_TYPE {}
    
    tipo Object {
        [method] abort() : Object ;
        [method] type_name() : String ;
        [method] copy() : SELF_TYPE ;
    }
    
    tipo IO : Object {
        [method] out_string(s : String) : SELF_TYPE ;
        [method] out_int(i : Int) : SELF_TYPE ;
        [method] in_string() : String ;
        [method] in_int() : Int ;
    }
    
    tipo Int : Object {}
    
    tipo String : Object {
        [method] length() : Int ;
        [method] concat(s : String) : String ;
        [method] substr(pos : Int, len : Int) : String ;
    }
    
    tipo Bool : Object {}
    
    tipo Main : IO {
        [method] main() : Int ;
    }
    
    tipo A : IO {
        [method] fact(n : AUTO_TYPE) : AUTO_TYPE ;
    }
    
}
======================== INFERENCIA DE TIPOS ========================
INFERENCIA : [
    EL PARAMETRO "n", EN EL METODO "fact" Y EN LA CLASE "A" POSEE TIPO "Int".
    EL METODO "fact" DE LA CLASE "A" POSEE COMO TIPO DE RETORNO "Int".
]
CONTEXTO :
{
    tipo SELF_TYPE {}
    
    tipo AUTO_TYPE {}
    
    tipo Object {
        [method] abort() : Object ;
        [method] type_name() : String ;
        [method] copy() : SELF_TYPE ;
    }
    
    tipo IO : Object {
        [method] out_string(s : String) : SELF_TYPE ;
        [method] out_int(i : Int) : SELF_TYPE ;
        [method] in_string() : String ;
        [method] in_int() : Int ;
    }
    
    tipo Int : Object {}
    
    tipo String : Object {
        [method] length() : Int ;
        [method] concat(s : String) : String ;
        [method] substr(pos : Int, len : Int) : String ;
    }
    
    tipo Bool : Object {}
    
    tipo Main : IO {
        [method] main() : Int ;
    }
    
    tipo A : IO {
        [method] fact(n : Int) : Int ;
    }
    
}